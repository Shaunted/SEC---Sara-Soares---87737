#!/usr/bin/python
#
#    v a
#

import sys, string

from math import ceil

import os.path

src_path = "../../versat/verilog_src/"
src_path_asic = "../../../versat/asic_umc130nm/sim/"

list_mem = ["opcode.hex","boot_rom.hex"]

class MyError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

codes={"nop":12,"rdw":0, "wrw":1, "wrc":1, "rdwb":2, "wrwb":3,
       "beqi":4, "beq":5, "bneqi":6, "bneq":7, "ldi":8, "ldih":9,
       "shft":10, "add":11, "addi":12, "sub":13, "and":14, "xor":15}
lookup={}

error = 0

def getVal (s) :
    "return numeric value of a symbol or number"
    if not s : return 0       # Empty symbol - zero
    a = lookup.get(s)         # Get value or None if not in lookup
    if a == None :
        if s[:2] == "0x" or s[:2] == "0X":
            b = int(s, 16) #hex number
        else :
            b = int(s)  #decimal a number
    	a = b
    	if b < 0 : a = 2**lookup.get("IMM_W") + b
    return a

def pass1 (program,pReg) :
    "determine addresses for labels and add to the lookup dictionary"
    global lookup
    for lin in program :
        flds = string.split(lin)
        if not flds : continue        # just an empty line
        if lin[0] == '#' : continue        # a comment line
        if lin[0] > ' ' :
            symb = flds[0]            # A symbol. Save its address in lookup
            lookup[symb] = pReg
            if len(flds) > 1 :        # Advance program counter unless only a symbol
                pReg = pReg + 1
        else : pReg = pReg + 1

def assemble (flds, pReg) :
    "assemble instruction to machine code"
    global lookup
    global codes
    parts = flds[1:]
    if len(parts) == 1 and flds[0]==".memset" : return  getVal(parts[0])
    opval = codes.get(flds[0])
    if opval == None : raise MyError(1)
    if len(flds) == 1 or flds[0]=="nop" : return opval*16**(lookup.get("INSTR_W")/4-1)
    if len(parts) == 1 and (flds[0]=="beqi" or flds[0]=="bneqi") :
        imm = getVal(parts[0]) - pReg - lookup.get("DELAY_SLOTS")
        if (imm > 2**(lookup.get("IMM_W")-1)-1) or (imm < -2**(lookup.get("IMM_W")-1)) : raise MyError(2)
        if imm < 0 : imm = 2**lookup.get("IMM_W") + imm
        return opval*16**(lookup.get("INSTR_W")/4-1) + imm
    if len(parts) == 1 :
        temp = parts[0].split('>>',1)
        if len(temp) == 2 :
            parts[0] = str(getVal(temp[0]) >> int(temp[1]))
        if flds[0]=="ldi" and getVal(parts[0]) > 2**lookup.get("IMM_W")-1 : return opval*16**(lookup.get("INSTR_W")/4-1) + (getVal(parts[0])&(2**lookup.get("IMM_W")-1))
        if flds[0]=="ldih" and getVal(parts[0]) > 2**lookup.get("IMM_W")-1 : return opval*16**(lookup.get("INSTR_W")/4-1) + ((getVal(parts[0])&((2**lookup.get("IMM_W")-1)<<lookup.get("IMM_W")))>>lookup.get("IMM_W"))
        if getVal(parts[0]) > 2**lookup.get("IMM_W")-1 : raise MyError(2)
        return opval*16**(lookup.get("INSTR_W")/4-1) + getVal(parts[0])
    if len(parts) == 2 :
        if (getVal(parts[0]) + getVal(parts[1])) > 2**lookup.get("IMM_W")-1 : raise MyError(2)
        return opval*16**(lookup.get("INSTR_W")/4-1) + getVal(parts[0]) + getVal(parts[1])
    if len(parts) == 3 :
        if (getVal(parts[0]) + getVal(parts[1]) + getVal(parts[2])) > 2**lookup.get("IMM_W")-1 : raise MyError(2)
        return opval*16**(lookup.get("INSTR_W")/4-1) + getVal(parts[0]) + getVal(parts[1]) + getVal(parts[2])
    if len(parts) > 3 : raise MyError(2)
    

def pass2 (program, pReg, mem_type) :
    global lookup
    global error
    "translate assembly code and symbols to machine code"
    fw = open(mem_type, 'w')
    if mem_type == list_mem[1] : fvw = open('rom.v', 'w')
    instrFormatTer = "%0" + str(int(ceil((lookup.get("IADDR_W")+1)/4.0))) + "x %0" + str(int(ceil(lookup.get("INSTR_W")/4.0))) + "x\t%s"
    instrFormatFile = "0" + str(int(ceil(lookup.get("INSTR_W")/4.0))) + "x"
    if mem_type == list_mem[1] : instrFormatVerilogFile = "`ROM_ADDR_W'h%0" + str(int(ceil(lookup.get("ROM_ADDR_W")/4.0))) + "x: data <= `INSTR_W'h%0" + str(int(ceil(lookup.get("INSTR_W")/4.0))) + "x;\n"
    j = 0
    for lin in program :
        lin2 = lin.split('#', 1)[0] #ignore comment at the end of line 
        lin2 = lin2.replace(',', ' ') #remove commas
        flds = string.split(lin2)
        if lin[0] == '#' : continue        # a comment line
        if lin[0] > ' ' : flds = flds[1:]     # drop symbol if there is one
        if not flds : continue                   # don't print nothing, it's a blank line
        else :
            try :
                instruction = assemble(flds, pReg)
                fw.write(format(instruction, instrFormatFile)+"\n")
                if mem_type == list_mem[1] : fvw.write(instrFormatVerilogFile % (pReg, instruction))
                print instrFormatTer % (pReg, instruction, lin),
                pReg = pReg + 1
                j = j + 1
            except MyError as e:
                print "*** ******** %s" % lin,
                error = 1
    instruction = codes.get("nop")*16**(lookup.get("INSTR_W")/4-1)
    if  mem_type == list_mem[1]:
        instrFormatVerilogFile = "default: data <= `INSTR_W'h%0" + str(int(ceil(lookup.get("INSTR_W")/4.0))) + "x;"
        fvw.write(instrFormatVerilogFile % (instruction))
        fvw.close()
        if j > 2**lookup.get("ROM_ADDR_W") :
            print "Program memory exceeded"
        while j < 2**lookup.get("ROM_ADDR_W") : # complete boot ROM file with nops
            fw.write(format(instruction,instrFormatFile)+"\n")
            j = j + 1
    else:
        if j > 2**lookup.get("IADDR_W") :
            print "Program memory exceeded"
        while j < 2**lookup.get("IADDR_W") : # complete instruction file with nops
            fw.write(format(instruction,instrFormatFile)+"\n")
            j = j + 1
    fw.close()

def main () :
    global lookup
    
    if os.path.isfile('xdict.txt'):
        with open('xdict.txt','r') as inf:
            lookup = eval(inf.read())
    else:
        with open(src_path + 'xdict.txt','r') as inf:
            lookup = eval(inf.read())
    
    lookup["RB"] = 0
    lookup["RB0"] = 0
    lookup["RB1"] = 1
    lookup["RC"] = 2
    
    pReg = lookup.get("PROG_MEM_BASE")
    
    mem_type = list_mem[0]
    i = 1
    while i < len(sys.argv):
        arg = sys.argv[i]
        if arg == "-b":
            # print "Assembling a boot loader at address 0"
            pReg = lookup.get("ROM_BASE")
            i = i + 1
            mem_type = list_mem[1]
        else:
            print "Usage: ./assembler [-b] < in.va > out.hex"
            print "     -b: assemble a boot loader from address 0"
            print "Wrong argument: " + sys.argv[i]
            sys.exit(1)
    
    if len(sys.argv) == 1 and pReg == None:
        print "PROG_MEM_BASE is not defined"
        sys.exit(2)
    
    program = sys.stdin.readlines()
    pass1 (program, pReg)
    pass2 (program, pReg, mem_type)
    if (error == 1):
        print "Program has errors"

if __name__ == "__main__" : main ()
