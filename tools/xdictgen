#!/usr/bin/python

#Description: generates a dictionary of symbols for the assembler
#The .vh files directory should be included as an argument


lookup = {}

#function to read the defs
def read_def():
    for line in f:
        values = line.split("\n")
        values = values[0].split(" ")
        if values[0] == "`define":
            if values[2].isdigit() == False:
                if "'d" in line:
                    const = line.split("'d")
                    const = const[1].split(" ")
                    lookup[values[1]] = int(const[0],10)
                elif "'h" in line:
                    const = line.split("'h")
                    const = const[1].split(" ")
                    lookup[values[1]] = int(const[0],16)
                elif "-" in line:
                    const = line.split("(")
                    const = const[1].split(")")
                    const = const[0].split("-")
                    a = const[0].split("`")
                    b = const[1].split("`")
                    lookup[values[1]] = lookup[a[1]] - lookup[b[1]]
                elif "+" in line:
                    const = line.split("(")
                    const = const[1].split(")")
                    const = const[0].split("+")
                    a = const[0].split("`")
                    b = const[1].split("'b")
                    lookup[values[1]] = lookup[a[1]] + int(b[1]) 
                else:
                    const = values[2].split("`")
                    const = const[1].split("\n")
                    lookup[values[1]] = lookup[const[0]]
            else:
                lookup[values[1]] = int(values[2])

#function to read the ctrldefs (converts instr codes to lower case)
def read_ctrldef():
    for line in f:
        values = line.split("\n")
        values = values[0].split(" ")
        if values[0] == "`define":
            if values[2].isdigit() == False:
                if "'h" in line:
                    const = line.split("'h")
                    const = const[1].split(" ")
                    lookup[values[1].lower()] = int(const[0],16)
                elif "-" in line:
                    const = line.split("-")
                    lookup[values[1]] = 2**lookup["ADDR_W"] - int(const[1])
            else:
                lookup[values[1]] = int(values[2])
    print lookup

import sys #used for reading the defs files path
if len(sys.argv) != 2:
    print("Number of arguments invalid! Use 2 arguments.")
    sys.exit()


#####xdefs.vh#####

f = open(sys.argv[1] + "/xdefs.vh", "r")
read_def()
f.close()


#####xctrldefs.vh#####
f = open(sys.argv[1] + "/xctrldefs.vh", "r")
read_ctrldef()
f.close()


#####xprogdefs.vh#####
f = open(sys.argv[1] + "/xprogdefs.vh", "r")
read_def()
f.close()


#####xregfdefs.vh#####
f = open(sys.argv[1] + "/xregfdefs.vh", "r")
read_def()
f.close()

#Write dictionary
xdict = open("xdict.json", "w")
xdict.write('{\n')


for key,val in lookup.items():
    xdict.write('\"' + key + '\":' + str(val) + ',\n')

#Aliases
xdict.write('\"' + "nop" + '\":' + str(lookup["addi"]) + ',\n')
xdict.write('\"' + "wrc" + '\":' + str(lookup["wrw"]) + ',\n')

xdict.write('}\n')

xdict.close() #close xdict
